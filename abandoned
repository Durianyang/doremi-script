(defn convert-fn[x]
  (cond (not (vector? x))
        x
        (and (keyword? (first x)) 
             (vector? (second x))
             (keyword? (first (second x)))
             (re-find #"(.+)_ITEMS$" (first (second x))))
           (do
             (println "items case")
             {:my-type (str (first x))
              :items (into [] (rest (second x)))

            (let [keyword-str (str (first x))
                 matcher (re-matcher  #"(.+)_ITEMS$" keyword-str)
                ] 
                (if (re-find matcher)
                   (do x) 
                  (array-map :my-type keyword-str
                            ) 
                  ))
        true
        x
             
        ))
(pprint (postwalk convert-fn xxx))
