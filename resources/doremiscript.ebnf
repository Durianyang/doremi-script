(*  EBNF grammar for doremi-script - This is for the clojure instaparse libarary *)
(* Grammar for AACM/Bhatkande style sargam/letter notation  *)
(* Author: John Rothfield 707 538-5133, cell 707 331-2700  rthfield@sonic.net *)
(* Use syntax highlighting for ocaml or applescript in your text editor *)
(* vim: set filetype=ocaml *)

COMPOSITION (* a musical piece *)
     (* Each section is separated by one or more 'empty' lines.
      The empty line can have spaces. Section doesn't include the eol.
      That allows things like "S" to parse as a COMPOSITION *)
  = <EMPTY_LINE*> COMPOSITION_ITEMS <EMPTY_LINE*>

COMPOSITION_ITEMS=
 SECTION (<'\n'> <EMPTY_LINE+>  SECTION)* 

<SECTION> = (* 3 kinds of sections: attributes, lyrics and sargam.
   Typically a composition will have attributes followed by lyrics, followed
   by lines of sargam. *)
(SARGAM_SECTION / ATTRIBUTE_SECTION / LYRICS_SECTION) 

(* TODO: Add support for ABC NUMBER and Devanagri notations
    uppers:UPPER_OCTAVE_LINE*
    sargam:(sargam:DEVANAGRI_SARGAM_LINE / sargam:SARGAM_LINE / sargam:ABC_SARGAM_LINE/ sargam:NUMBER_SARGAM_LINE)
    lowers:LOWER_OCTAVE_LINE*
    lyrics:LYRICS_LINE?
  *)


SARGAM_SECTION  
     (* A line of music, but is written over multiple physical lines. 
     There is an order. optional upper octave lines followed by main line 
      of sargam followed by optional lower octave and lyrics lines.
      Usually one or two upper lines followed by mandatory sargam line followed by
      lower octave line followed by lyrics *)

(* Original
   uppers:UPPER_OCTAVE_LINE*
    sargam:(sargam:DEVANAGRI_SARGAM_LINE / sargam:SARGAM_LINE / sargam:ABC_SARGAM_LINE/ sargam:NUMBER_SARGAM_LINE)
    lowers:LOWER_OCTAVE_LINE*
    lyrics:LYRICS_LINE?

*)

  =  (UPPER_OCTAVE_LINE <"\n">)*  SARGAM_LINE (<'\n'> LOWER_OCTAVE_LINE)* (<'\n'> LYRICS_LINE)*

SARGAM_LINE (* consists of optional line# at beginning of line, followed by 1 or
more measures followed  *) = SARGAM_LINE_ITEMS
SARGAM_LINE_ITEMS = LINE_NUMBER?  SARGAM_LINE_ITEMS2


<SARGAM_LINE_ITEMS2> (* consists of optional line# at beginning of line, followed by 1 or more measures followed  *)
  = <WHITE_SPACE?> BARLINE? MEASURE (BARLINE MEASURE)*  BARLINE? <WHITE_SPACE?>



(* OLD
SARGAM_LINE_ITEM  "an item in the main line"
  = x:MEASURE /
    x:WHITE_SPACE /  
    x:BEAT_DELIMITED / 
    x:BEAT_UNDELIMITED / 
    x:SARGAM_PITCH / 
    x:RHYTHMICAL_DASH / 
    x:BARLINE / 
    x:REPEAT_SYMBOL {
            x.attributes=[];
            return x;
    }
 
 *)
ATTRIBUTE_SECTION (* Key value pairs *)
 = ATTRIBUTE_SECTION_ITEMS
ATTRIBUTE_SECTION_ITEMS = ATTRIBUTE_LINE (<'\n'> ATTRIBUTE_LINE)* 

LYRICS_SECTION (* Lines of lyrics *)
  = LYRICS_LINE (<'\n'> LYRICS_LINE)*

<EMPTY_LINE>= WHITE_SPACE? '\n'  


(************** Barlines **********************)
BARLINE  (* a musical barline or repeat *)
  = 
  REVERSE_FINAL_BARLINE  |
  FINAL_BARLINE  |
  DOUBLE_BARLINE  |
  LEFT_REPEAT  |
  RIGHT_REPEAT  |
  SINGLE_BARLINE 

REVERSE_FINAL_BARLINE  (* ie [|, a reverse final barline *)
  = '[' "|"

FINAL_BARLINE (* ie |], a final barline *)
  = '|' ']'

DOUBLE_BARLINE (* ie ||, a solid barline *)
  = '|' '|'

SINGLE_BARLINE (* ie | *)
  = '|' ! ('|' | ']' | ':')
LEFT_REPEAT (* ie |:  *)
  = "|:"

RIGHT_REPEAT (* ie :| *)
  = ":|"

(**** End barline section *)

(****   Pitches, sharps and flats ************)	
	
FLAT_OR_SHARP = '#' | 'b'

(*  Letters SrRgGmMPdDnN in latin script  *)
  Sb  = <"Sb">
  Ssharp =    <"S#">  
  Rsharp  =    <"R#">  
  Gsharp  =    <"G#">   
  Psharp  =    <"P#">   
  Pb   =    <"Pb">   
  Dsharp  =    <"D#">   
  Nsharp   =   < "N#">  
  Pb    =    <"Pb">   
  S  =    <"S"> ! FLAT_OR_SHARP  
  r =    <"r"> ! FLAT_OR_SHARP  
  R  =   <"R"> ! FLAT_OR_SHARP  
  g =    <"g"> ! FLAT_OR_SHARP  
  G =    <"G"> ! FLAT_OR_SHARP  
  m =    <"m"> ! FLAT_OR_SHARP  
  M =    <"M"> ! FLAT_OR_SHARP  
  P =    <"P"> ! FLAT_OR_SHARP  
  d =    <"d"> ! FLAT_OR_SHARP  
  D =    <"D"> ! FLAT_OR_SHARP  
  n =    <"n"> ! FLAT_OR_SHARP  
  N =    <"N"> ! FLAT_OR_SHARP  

SARGAM_MUSICAL_CHAR  = 
    Sb |
    Ssharp |
    Rsharp |
    Gsharp |
    Psharp |
    Pb |
    Dsharp |
    Nsharp |
    Pb |
    S |
    r |
    R |
    g |
    G |
    m |
    M |
    P |
    d |
    D |
    n |
    N 
BEGIN_SLUR = '('
END_SLUR = ')'

BEGIN_SLUR_SARGAM_PITCH =  (*  (S   *)
    BEGIN_SLUR SARGAM_PITCH

SARGAM_PITCH = (* a sargam pitch ie SrR.. *)
     SARGAM_MUSICAL_CHAR END_SLUR?  

<SARGAM_PITCH2> = (* a sargam pitch ie SrR.. *)
      SARGAM_PITCH | (BEGIN_SLUR_SARGAM_PITCH) 


<SARGAM_ORNAMENT_PITCH> = SARGAM_MUSICAL_CHAR 
(***  End pitches *********************)
		 
SPACE  (* space *)
  = ' '

<WHITE_SPACE> (* ONE OR MORE SPACES *)
=    #' +'   
(***** Beats and Measures ****)
<BEGIN_BEAT_SYMBOL>  (* symbol to use to indicate start of beat *)
  =   '<' 
<END_BEAT_SYMBOL>  (* Symbol to use to indicate end of beat *)
  =   '>'  

(* Beats are sequences of pitches or dashes. Spaces separate beats. Beats can also be
delimited by angle brackets, in which case white space can be used in the beat *)
BEAT = BEAT_DELIMITED | !BEGIN_BEAT_SYMBOL BEAT_UNDELIMITED 
<BEAT_DELIMITED> (* ie <S R G m> . Useful if lyrics wouldn't line up otherwise!. 
use Srgm> or S r g m> to group pithes into a single beat. The > delimiters correspond to the lower loop in the aacm notation system *)
  = <BEGIN_BEAT_SYMBOL> BEAT_DELIMITED_ITEMS <END_BEAT_SYMBOL>
BEAT_DELIMITED_ITEMS = BEAT_DELIMITED_ITEM+ <BEAT_DELIMITED_ITEM> (* inside of a delimited beat, ie <S--  R--  G-> *)
  = BEAT_DELIMITED_SARGAM_PITCH_WITH_DASHES | SARGAM_PITCH2 !DASH | DASH | <WHITE_SPACE>

DASH =  (* ie a -, used as a rhythmical placeholder. IE S--R--G- *) 
   '-'

LINE_NUMBER (*    1)    2)     3) etc     *) 
= DIGITS  <')'>  <WHITE_SPACE?>

<DIGITS> = (* One or more digits *)  #'\d+'

BEAT_DELIMITED_SARGAM_PITCH_WITH_DASHES (* <S  - - R > *) = SARGAM_PITCH2 (WHITE_SPACE | DASH)+

REPEAT_SYMBOL = '%'

PITCH_WITH_DASHES (* for example 'S--'  *)
  = SARGAM_PITCH2 DASH+



<BEAT_UNDELIMITED> (* beats can be indicated by a group of pitches that consist only of pitches and dashes such as 'S--R--G-'   Can't contain spaces *)
  = BEAT_UNDELIMITED_ITEMS 
BEAT_UNDELIMITED_ITEMS = BEAT_UNDELIMITED_ITEM+


<BEAT_UNDELIMITED_ITEM> (* inside of a simple beat, ie S--R--G- Note that undelimited beats cannot contain spaces *)
  = PITCH_WITH_DASHES / 
    SARGAM_PITCH2 / 
    DASH 

NON_BARLINE 
  =
    WHITE_SPACE /  
    BEAT 

MEASURE_ITEMS = BEAT (<WHITE_SPACE> BEAT)*
MEASURE 
  = <WHITE_SPACE?> MEASURE_ITEMS <WHITE_SPACE?>

(* unused
UNUSED_SARGAM_LINE_ITEM  
an item in the main line 
  = MEASURE /
    WHITE_SPACE /  
    BEAT_DELIMITED / 
    BEAT_UNDELIMITED / 
    SARGAM_PITCH / 
    DASH / 
    BARLINE / 
    REPEAT_SYMBOL 
*)

LYRICS_LINE (* line of syllables *)
  = <WHITE_SPACE?> LYRICS_LINE_ITEMS

LYRICS_LINE_ITEMS = SYLLABLE (LYRICS_LINE_ITEM)*

<LYRICS_LINE_ITEM> (* items in lyrics line, ie a word or a syllable. ie he-llo john gives 3 items, 3 syllables *)
  = SYLLABLE | <WHITE_SPACE>

SYLLABLE =  HYPHENATED_SYLLABLE | NON_HYPHENATED_SYLLABLE
<HYPHENATED_SYLLABLE> (* ends in a hyphen *)
  = #"[a-zA-Z'!]+-" 

<NON_HYPHENATED_SYLLABLE> (* Doesn't end in hyphen  *)
  = #"[a-zA-Z'!]+" !"-"

UPPER_OCTAVE_LINE (* can put upper octave dots or semicolons for upper upper octave (. or :). Also tala symbols +203   *)
  = <WHITE_SPACE?> UPPER_OCTAVE_LINE_ITEM+ 

SARGAM_ORNAMENT= UNDELIMITED_SARGAM_ORNAMENT | DELIMITED_SARGAM_ORNAMENT

<DELIMITED_SARGAM_ORNAMENT> (* in upper line <NRSNS> *)
  =  "<" SARGAM_ORNAMENT_ITEMS  ">"

SARGAM_ORNAMENT_ITEMS = SARGAM_ORNAMENT_ITEM+

<UNDELIMITED_SARGAM_ORNAMENT> (* in upper line NRSNS *)
  = !"<" SARGAM_ORNAMENT_ITEMS 

<SARGAM_ORNAMENT_ITEM>
  = SARGAM_ORNAMENT_PITCH 

MORDENT = "~" 


ALTERNATE_ENDING_INDICATOR 
(*   1._______ 2.___ etc. The period is optional. Must have either dot or underscores. TODO: accepts 1_.___ which is not exactly what I want.  *)

= #"[1-3]"  #"[\._]+" 
<UPPER_OCTAVE_LINE_ITEM> (* Things above notes, including talas, octaves,chords, and 1st and second ending symbols *)
  = <WHITE_SPACE> /
 UPPER_OCTAVE_DOT /
 TALA /
     CHORD_SYMBOL /
	    SARGAM_ORNAMENT /
 MORDENT /
 UPPER_UPPER_OCTAVE_SYMBOL /
ALTERNATE_ENDING_INDICATOR 
	(*
     DELIMITED_SARGAM_ORNAMENT  / 
     WHITE_SPACE / 
     UPPER_OCTAVE_DOT /
     ALTERNATE_ENDING_INDICATOR /
     TALA /
     MORDENT /
     UPPER_UPPER_OCTAVE_SYMBOL /
     CHORD_SYMBOL /
     SARGAM_ORNAMENT  
   *)
UPPER_OCTAVE_DOT= DOT 

DOT = (*  Period and asterisk are allowed *)
  #"[\.*]"

UPPER_UPPER_OCTAVE_SYMBOL=":"

TALA (* tala markings. ie +203 for tintal. 012 for rupak *)
  = #"[+1203456]"

FORWARD_SLASH_CHAR  (* note that putting forward slash in regex doesn't seem to work *)
  = "\\"

(* CHORD_CHAR  TODO: review
  = char:[a-gA-GmiMaIivV0-9+] / char:FORWARD_SLASH_CHAR
*)


CHORD_SYMBOL = #"[a-gA-GvViI][^\s]*"

LOWER_OCTAVE_LINE (* can put lower octave dots or semicolons for lower-lower octave (. or :)   *)
  = <WHITE_SPACE?> LOWER_OCTAVE_LINE_ITEMS <WHITE_SPACE?> 

LOWER_OCTAVE_LINE_ITEMS= LOWER_OCTAVE_LINE_ITEM+
LOWER_OCTAVE_LINE_ITEM =  <WHITE_SPACE> | LOWER_OCTAVE_DOT |
          LOWER_LOWER_OCTAVE_SYMBOL | KOMMAL_INDICATOR  

LOWER_OCTAVE_DOT= DOT
LOWER_LOWER_OCTAVE_SYMBOL=":"
KOMMAL_INDICATOR (* An underscore for flat. For the traditional bhatkande notation - devanagri, indicates a flatted note, since devanagri seems not to have lowercase *)
 = "_"


<ATTRIBUTE_LINE> (* ie Author: John Rothfield *)
= KEY <WHITE_SPACE?>   <":"> <WHITE_SPACE?> VALUE <WHITE_SPACE?>

<KEY>= (* ie Author *)  #"\w+"

<VALUE>=  (* Attribute value can have embedded spaces.  *)
(* Non-space followed by (spaces | non-space)   *)
#"[^\n\r ](( *)[^\n\r ])*"


