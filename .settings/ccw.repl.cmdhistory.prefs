cmdhistory=["(1)" "1" "(+ 1 1)" "\\n(\:require [doremi_script_clojure.core_test \:as doremi_script_clojure.core_test\\n             ])" "(\:require ['doremi_script_clojure.core_test \:as doremi_script_clojure.core_test\\n                ])" "(\:require [core_test\\n           ])" "(ns doremi_script_clojure.core\\n  (\:require [instaparse.core \:as insta])\\n  )" "(parser \\"S\='1'\\")" "(insta/parser \\"S\='1'\\")" "(\:require  [doremi_script_clojure.core_test \:refer \:all])" "\\n(\:require  ['doremi_script_clojure.core_test \:refer \:all])" "(run-tests)" "(ns doremi_script_clojure.core_test\\n  (\:use clojure.test))" "(run-all-tests)" "(run-tests)" "(namespace doremi_script_clojure)" "(namespace doremi_script_clojure.core\\n           )" "(namespace 'doremi_script_clojure.core\\n              )" "(run-tests)" "(namespace 'doremi_script_clojure.core-test)" "(namespace 'doremi_script_clojure.core-testsss\\n           )" "(namespace 'doremi_script_clojure.core_test\\n           )" "(\:use doremi_script_clojure.core_test)" "(\:use 'doremi_script_clojure.core_test)" "(run-tests)" "(run-all-tests)" "(run-all-tests doremi_script_clojure.core_test\\n               )" "(run-all-tests 'doremi_script_clojure.core_test\\n               )" "(run-tests doremi_script_clojure\\n           )" "(run-all-tests 'doremi_script_clojure.core_test\\n               )" "(ns whatever (\:use [instatest.core]))" "(ns whatever (\:use ['instatest.core]))" "(parser)" "(instaparse.core/parser 'S')" "(instaparse.core/parser 'S\=1\\n                        ')" "(instaparse.core/parser 'S\=1')" "(instaparse.core/parser 'S\=1' \\"S\\"\\n                        )" "(instaparse.core/parse 'S\=1' \\"S\\"\\n                        )" " (ns whatever (\:use [doremi_script_clojure\\n                     .core]))" " (ns whatever (\:use [doremi_script_clojure.core]))" "(get-parser 'S' )" "(get-parser)" "(get-parser \\"SSS\\"\\n            )" " (ns whatever (\:use [doremi_script_clojure.core_test\\n                     ]))" "(doremi_script_clojure.core_test/ss )" " (ns whatever (\:use [doremi_script_clojure.core_test\\n                     ]))" ";; Switching to doremi_script_clojure.core-test namespace" "(test-repeat-symbol)" "(run-tests)" "(parse-succeeded3)" "(doremi_script_clojure.core-test/parse-succeeded3)" "(ns doremi_script_clojure.core-test)" "(parse-succeeded3)" "(test-left-repeat)" "(run-all-tests)" ";; Switching to doremi_script_clojure.core-test namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'doremi_script_clojure.core-test)))" "(run-tests)" "(test-left-repeat)" "(sargam-pitch-can-include-left-slur)" ";; Switching to doremi_script_clojure.core-test namespace" "(run-tests)" ";; Switching to doremi_script_clojure.core-test namespace" "(run-tests)" "(sargam-pitch-can-include-left-slur)" "(run-tests)" "\:316" "(run-tests)" "(get-parser \\"||\\" \:start \\n            \:SINGLE_BARLINE)" "(run-tests)" ";; Switching to doremi_script_clojure.core-test namespace" "(run-tests)" "(sargam-line-simple)" "(run-tests)" "(test-tala)" "(run-tests)" "(composition-with-attributes-lyrics-and-sargam-section)" "(sargam-ornament)" "(run-tests)" "(alternate_ending)" "(run-tests)" "(lower-octave-line)" "(run-tests)" "(composition-with-attributes-lyrics-and-sargam-section)" "(run-tests)" "(composition-with-attributes-lyrics-and-sargam-section)" "(run-tests)" "(dot)" "(yesterday_no_chords)" "(run-tests)" ";; Switching to doremi_script_clojure.core-test namespace" "(yesterday_no_chords)" "(test-dash)" "(doesnt-parse-single-barline-when-it-sees-double-barline)" "(run-tests)" ";; Switching to doremi_script_clojure.core-test namespace" "(run-tests)" "(lyrics-section)" ";; Switching to doremi_script_clojure.core-test namespace" "(lyrics-section)" "(dash)" "(lyrics-section)" "(dash)" "(run-tests)" ";; Switching to doremi_script_clojure.core-test namespace" "(run-tests)" ";; Switching to doremi_script_clojure.grammar-acceptance-tests namespace" "(run-tests)" ";; Switching to doremi_script_clojure.grammar-unit-tests namespace" "(run-tests)" ";; Switching to doremi_script_clojure.grammar-acceptance-tests namespace" "(run-tests)" ";; Switching to doremi_script_clojure.grammar-unit-tests namespace" "(run-tests)" "(run-all-tests)" "(run-tests)" "(good-parse \\"N\#\\" \:BEAT [\\n                        \:Nsharp])" "(good-parse \\"S\#\\" \:BEAT [\\n                        \:Nsharp])" "(good-parse \\"S\#\\" \:BEAT [\\n                        \:Ssharp])" ";; Switching to doremi_script_clojure.grammar-unit-tests namespace" "(good-parse \\"S\#\\" \:BEAT [\\n                        \:Ssharp])" "\:S\\\\\#" "\:S\#" "\:N\#" ";; Switching to doremi_script_clojure.grammar-unit-tests namespace" "(good-parse \\"S\#\\" \:BEAT [\\n                        \:Ssharp])" "(run-tests)" ";; Switching to doremi_script_clojure.grammar-unit-tests namespace" "(is (good-parse \\"S\\" \:SARGAM_LINE [\:S]))" "(composition_with_only_sargam_and_no_eol)" ";; Switching to doremi_script_clojure.grammar-acceptance-tests namespace" "(composition_with_only_sargam_and_no_eol)" ";; Switching to doremi_script_clojure.grammar-acceptance-tests namespace" "(run-tests)" ";; Switching to doremi_script_clojure.grammar-acceptance-tests namespace" "(run-tests)" "(run-all-tests)" ";; Switching to doremi_script_clojure.test-helper namespace" ";; Switching to doremi_script_clojure.grammar-acceptance-tests namespace" ";; Switching to doremi_script_clojure.grammar-unit-tests namespace" "(my-get-parser)" "(yesterday)" ";; Switching to doremi_script_clojure.grammar-acceptance-tests namespace" "(yesterday)" "(run-tests)" "(trunc \\"str\\" 20)" ";; Switching to doremi_script_clojure.test-helper namespace" "(trunc \\"str\\" 20)" "(trunc \\"strdsfdddddddddddddddddddddd\\n\\" 20)" "(trunc \\"\\" 20)" "(run-tests)" ";; Switching to doremi_script_clojure.grammar-acceptance-tests namespace" "(trunc \\"\\" 20)" "(run-tests)" "((my-get-parser)\\"S\\")" "((my-get-parser)\\".\\\\nS\\")" "((my-get-parser)\\".\\\\nS\\\\n.\\")" "((my-get-parser)\\".\\\\nS\\\\n.\\\\nhi\\")" "((my-get-parser)\\".\\\\nS\\\\n.\\\\nhi-john  \\")" "((my-get-parser)\\".\\\\n|S\\\\n.\\\\nhi-john  \\")" "((my-get-parser)\\" RGRS\\\\n.\\\\n|S\\\\n.\\\\nhi-john  \\")" ";; Switching to doremi_script_clojure.grammar-unit-tests namespace" "(delimited_sargam_ornament)" "((my-get-parser) \\"<S>\\" \:start \:SARGAM_ORNAMENT )" "(delimited_sargam_ornament)" "(delimited_sargam_ornament_is_an_ornament)" "(undelimited_sargam_ornament)" "(undelimited_sargam_ornament_is_an_ornament)" "(run-tests)" ";; Switching to doremi_script_clojure.grammar-acceptance-tests namespace" "(run-tests)" "(slurp-fixture 'yesterday')" ";; Switching to doremi_script_clojure.test-helper namespace" "(slurp-fixture 'yesterday')" ";; Switching to doremi_script_clojure.test-helper namespace" "(slurp-fixture 'yesterday')" "(slurp-fixture 'yesterday.txt')" "(slurp-fixture \\"yesterday.txt\\")" "(my-get-parser)" "(insta/transform {\:switch (fn [x y] [\:switch y x])}\\n    ((my-get-parser) \\"S\\" \:SARGAM_PITCH))" "((my-get-parser) \\"S\\" \:SARGAM_PITCH)" "(my-get-parser)" "((my-get-parser) \\"S\\" \:start \:SARGAM_PITCH)" "(def tree ((my-get-parser) \\"S\\" \:start \:SARGAM_PITCH))" "tree" "(insta/transform {\:S (fn [x y] [\:r \\"R\\"])}\\n    tree)" "tree" "(insta/transform {\:S (fn [x\\n                          ] [\:r \\"R\\"])}\\n    tree)" "(tree)" "(my-transform)" "tree" "(my-transform)" "(trunc \\"hi\\" 20)" "[\:SARGAM_MUSICAL_CHAR ([\:G \\"G\\"]) [1314 1315]]" "'[\:SARGAM_MUSICAL_CHAR ([\:G \\"G\\"]) [1314 1315]]" ";; Switching to doremi_script_clojure.test-helper namespace" ";; Switching to doremi_script_clojure.grammar-acceptance-tests namespace" ";; Switching to doremi_script_clojure.test-helper namespace" "(class [1 2])" "(class '[1 2])" "(pprint [1,2])" "(pprint '[1,2])" "(\= '1 1)" ";; Switching to doremi_script_clojure.semantic-analyzer-tests namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'doremi_script_clojure.semantic-analyzer-tests)))" ";; Switching to doremi_script_clojure.semantic-analyzer-tests namespace" ";; Switching to doremi_script_clojure.semantic-analyzer-test namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'doremi_script_clojure.semantic-analyzer-test)))" ";; Switching to doremi_script_clojure.semantic-analyzer-test namespace" ";; Switching to doremi_script_clojure.grammar-acceptance-tests namespace" ";; Switching to doremi_script_clojure.semantic-analyzer-test namespace" ";; Switching to doremi_script_clojure.semantic_analyzer namespace" "'{}" "(class '{})" ";; Switching to doremi_script_clojure.semantic-analyzer-test namespace" ";; Switching to doremi_script_clojure.semantic_analyzer namespace" ";; Switching to doremi_script_clojure.semantic-analyzer-test namespace" "(def x (get-parser2  \\"S- --\\" \:start \:SARGAM_SECTION))" "(class x)" "(seq x)" "(head x)" "(first x)" "(x 2)" "x" "(nth x 2)" "(size x)" "(count x)" "x" "(tail x)" "(second x)" "x" "(def x (get-parser2  \\"S- --\\\\nHe-llo\\" \:start \:SARGAM_SECTION))" "x" "(count x)" "(pprint x)" "(vector? x)" "(vector? \\"hi\\")" "(def y (second x)\\n  )" "y" "(meta y)" "(last x)" "(meta (last x))" "(filter \#(\= \:SARGAM_LINE (first %)) x)" "(filter \#(\= \:SARGAM_LINE (first %1)) x)" "\#(re-gsub \#\\"ugly\\" \\"pretty\\" %)" "(filter \#(\= \:SARGAM_LINE %) x)" "x" "(filter \#(\= \:SARGAM_LINE (first%)) x)" "(filter \#(\= \:SARGAM_LINE (first \\n                           %)) x)" "(\= \:X '[])" "x" ";; Switching to doremi_script_clojure.semantic-analyzer namespace" "(filter \#(\= \:SARGAM_LINE (first \\n                           \\n                           %)) x)" ";; Switching to doremi_script_clojure.semantic-analyzer-test namespace" "{1 2 3 4}" "({1 2, 3 4} 1)" "(def z  {1 2 3 4})" "z" "(seq z)" "(conj [1 2] {})" "(conj {} [1 2])" "(conj () 1)" "(reduce + 100 [1 2 3])" "(reduce \#(+) \\n        100 [1 2 3])" "(reduce \#(+ %1 %2\\n            ) \\n        100 [1 2 3])" "(reduce \#(conj %1 (+ 1 %2))  {} [1 2 3])" "(reduce \#(conj %2 (+ 1 %1\\n                     ))  {} [1 2 3])" "(conj {} 1 2)" "(conj {} (1 2)\\n      )" "(conj {} [1 2]\\n      )" "(reduce \#(conj %1 (+ 1 %1\\n                     ) %)  {} [1 2 3])" ";; Switching to doremi_script_clojure.semantic-analyzer namespace" ";; Switching to doremi_script_clojure.semantic-analyzer-test namespace" ";; Switching to doremi_script_clojure.grammar-unit-tests namespace" "(run-tests)" ";; Switching to doremi_script_clojure.semantic-analyzer namespace" "(def z (get-parser2  \\"G- P-\\" \:start \:SARGAM_LINE))" "z" "(first z)" "(meta (first z))" "(meta z)" "z" "(meta (second z))" "(meta z)" "(\:instaparse.gll/start-index (meta z))" ";; Switching to doremi_script_clojure.semantic-analyzer namespace"]
eclipse.preferences.version=1
