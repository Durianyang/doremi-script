cmdhistory=["(1)" "1" "(+ 1 1)" "\\n(\:require [doremi_script_clojure.core_test \:as doremi_script_clojure.core_test\\n             ])" "(\:require ['doremi_script_clojure.core_test \:as doremi_script_clojure.core_test\\n                ])" "(\:require [core_test\\n           ])" "(ns doremi_script_clojure.core\\n  (\:require [instaparse.core \:as insta])\\n  )" "(parser \\"S\='1'\\")" "(insta/parser \\"S\='1'\\")" "(\:require  [doremi_script_clojure.core_test \:refer \:all])" "\\n(\:require  ['doremi_script_clojure.core_test \:refer \:all])" "(run-tests)" "(ns doremi_script_clojure.core_test\\n  (\:use clojure.test))" "(run-all-tests)" "(run-tests)" "(namespace doremi_script_clojure)" "(namespace doremi_script_clojure.core\\n           )" "(namespace 'doremi_script_clojure.core\\n              )" "(run-tests)" "(namespace 'doremi_script_clojure.core-test)" "(namespace 'doremi_script_clojure.core-testsss\\n           )" "(namespace 'doremi_script_clojure.core_test\\n           )" "(\:use doremi_script_clojure.core_test)" "(\:use 'doremi_script_clojure.core_test)" "(run-tests)" "(run-all-tests)" "(run-all-tests doremi_script_clojure.core_test\\n               )" "(run-all-tests 'doremi_script_clojure.core_test\\n               )" "(run-tests doremi_script_clojure\\n           )" "(run-all-tests 'doremi_script_clojure.core_test\\n               )" "(ns whatever (\:use [instatest.core]))" "(ns whatever (\:use ['instatest.core]))" "(parser)" "(instaparse.core/parser 'S')" "(instaparse.core/parser 'S\=1\\n                        ')" "(instaparse.core/parser 'S\=1')" "(instaparse.core/parser 'S\=1' \\"S\\"\\n                        )" "(instaparse.core/parse 'S\=1' \\"S\\"\\n                        )" " (ns whatever (\:use [doremi_script_clojure\\n                     .core]))" " (ns whatever (\:use [doremi_script_clojure.core]))" "(get-parser 'S' )" "(get-parser)" "(get-parser \\"SSS\\"\\n            )" " (ns whatever (\:use [doremi_script_clojure.core_test\\n                     ]))" "(doremi_script_clojure.core_test/ss )" " (ns whatever (\:use [doremi_script_clojure.core_test\\n                     ]))" ";; Switching to doremi_script_clojure.core-test namespace" "(test-repeat-symbol)" "(run-tests)" "(parse-succeeded3)" "(doremi_script_clojure.core-test/parse-succeeded3)" "(ns doremi_script_clojure.core-test)" "(parse-succeeded3)" "(test-left-repeat)" "(run-all-tests)" ";; Switching to doremi_script_clojure.core-test namespace" "(ccw.debug.serverrepl/with-exception-serialization (clojure.core/binding [clojure.core/*compile-path* \\"classes\\"] (clojure.core/compile 'doremi_script_clojure.core-test)))" "(run-tests)" "(test-left-repeat)" "(sargam-pitch-can-include-left-slur)" ";; Switching to doremi_script_clojure.core-test namespace" "(run-tests)" ";; Switching to doremi_script_clojure.core-test namespace" "(run-tests)" "(sargam-pitch-can-include-left-slur)" "(run-tests)" "\:316" "(run-tests)" "(get-parser \\"||\\" \:start \\n            \:SINGLE_BARLINE)" "(run-tests)" ";; Switching to doremi_script_clojure.core-test namespace" "(run-tests)" "(sargam-line-simple)" "(run-tests)" "(test-tala)" "(run-tests)" "(composition-with-attributes-lyrics-and-sargam-section)" "(sargam-ornament)" "(run-tests)" "(alternate_ending)" "(run-tests)" "(lower-octave-line)" "(run-tests)" "(composition-with-attributes-lyrics-and-sargam-section)" "(run-tests)" "(composition-with-attributes-lyrics-and-sargam-section)" "(run-tests)" "(dot)" "(yesterday_no_chords)" "(run-tests)"]
eclipse.preferences.version=1
